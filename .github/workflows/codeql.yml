name: Advanced Build and Artifact Upload

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }} / Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
      fail-fast: false

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Cache pip
      - name: Cache pip (Linux/macOS)
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Cache pip (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      # Install dependencies
      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then
            python -m pip install --upgrade pip
            pip install -r requirements.txt
          else
            echo "requirements.txt not found. Skipping pip install."
          fi
        shell: bash

      # Install dependencies on Windows
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          if (Test-Path "requirements.txt") {
            python -m pip install --upgrade pip
            pip install -r requirements.txt
          } else {
            Write-Host "requirements.txt not found. Skipping pip install."
          }
        shell: pwsh

      # Run tests
      - name: Run tests
        run: |
          if [ -f requirements.txt ]; then
            pytest --maxfail=2 --disable-warnings -q
          else
            echo "Skipping tests, requirements.txt not found."
          fi
        shell: bash

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        run: |
          if (Test-Path "requirements.txt") {
            pytest --maxfail=2 --disable-warnings -q
          } else {
            Write-Host "Skipping tests, requirements.txt not found."
          }
        shell: pwsh

      # Build wheel and sdist
      - name: Build wheel and sdist
        run: |
          if [ -f setup.py ]; then
            python setup.py sdist bdist_wheel
          else
            echo "setup.py not found. Skipping build."
          fi
        shell: bash

      - name: Build wheel and sdist (Windows)
        if: runner.os == 'Windows'
        run: |
          if (Test-Path "setup.py") {
            python setup.py sdist bdist_wheel
          } else {
            Write-Host "setup.py not found. Skipping build."
          }
        shell: pwsh

      # Upload artifact
      - name: Upload build artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/*

  codeql:
    name: CodeQL Analysis
    needs: build
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-ubuntu-latest-py3.11

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
